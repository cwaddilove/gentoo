--- maraschino/lib/feedparser/sgmllib3.py.orig	2014-08-31 14:22:16.565295766 +0200
+++ maraschino/lib/feedparser/sgmllib3.py	2014-08-31 14:23:29.545294930 +0200
@@ -8,7 +8,7 @@
 # and CDATA (character data -- only end tags are special).  RCDATA is
 # not supported at all.
 
-import _markupbase
+import markupbase
 import re
 
 __all__ = ["SGMLParser", "SGMLParseError"]
@@ -51,7 +51,7 @@
 # chunks).  Entity references are passed by calling
 # self.handle_entityref() with the entity reference as argument.
 
-class SGMLParser(_markupbase.ParserBase):
+class SGMLParser(markupbase.ParserBase):
     # Definition of entities -- derived classes may override
     entity_or_charref = re.compile('&(?:'
       '([a-zA-Z][-.a-zA-Z0-9]*)|#([0-9]+)'
@@ -70,7 +70,7 @@
         self.lasttag = '???'
         self.nomoretags = 0
         self.literal = 0
-        _markupbase.ParserBase.reset(self)
+        markupbase.ParserBase.reset(self)
 
     def setnomoretags(self):
         """Enter literal mode (CDATA) till EOF.
@@ -381,8 +381,8 @@
     # Example -- report an unbalanced </...> tag.
     def report_unbalanced(self, tag):
         if self.verbose:
-            print('*** Unbalanced </' + tag + '>')
-            print('*** Stack:', self.stack)
+            print '*** Unbalanced </' + tag + '>'
+            print '*** Stack:', self.stack
 
     def convert_charref(self, name):
         """Convert character reference, may be overridden."""
@@ -467,40 +467,40 @@
         data = self.testdata
         if data:
             self.testdata = ""
-            print('data:', repr(data))
+            print 'data:', repr(data)
 
     def handle_comment(self, data):
         self.flush()
         r = repr(data)
         if len(r) > 68:
             r = r[:32] + '...' + r[-32:]
-        print('comment:', r)
+        print 'comment:', r
 
     def unknown_starttag(self, tag, attrs):
         self.flush()
         if not attrs:
-            print('start tag: <' + tag + '>')
+            print 'start tag: <' + tag + '>'
         else:
-            print('start tag: <' + tag, end=' ')
+            print 'start tag: <' + tag,
             for name, value in attrs:
-                print(name + '=' + '"' + value + '"', end=' ')
-            print('>')
+                print name + '=' + '"' + value + '"',
+            print '>'
 
     def unknown_endtag(self, tag):
         self.flush()
-        print('end tag: </' + tag + '>')
+        print 'end tag: </' + tag + '>'
 
     def unknown_entityref(self, ref):
         self.flush()
-        print('*** unknown entity ref: &' + ref + ';')
+        print '*** unknown entity ref: &' + ref + ';'
 
     def unknown_charref(self, ref):
         self.flush()
-        print('*** unknown char ref: &#' + ref + ';')
+        print '*** unknown char ref: &#' + ref + ';'
 
     def unknown_decl(self, data):
         self.flush()
-        print('*** unknown decl: [' + data + ']')
+        print '*** unknown decl: [' + data + ']'
 
     def close(self):
         SGMLParser.close(self)
@@ -529,8 +529,8 @@
     else:
         try:
             f = open(file, 'r')
-        except IOError as msg:
-            print(file, ":", msg)
+        except IOError, msg:
+            print file, ":", msg
             sys.exit(1)
 
     data = f.read()
